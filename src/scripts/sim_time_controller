#!/usr/bin/python
import rospy
from std_msgs.msg import Float64
from rosgraph_msgs.msg import Clock
import time

class SimTimeController:
    def __init__(self):
        rospy.init_node('sim_time_controller')
        self.clock_pub = rospy.Publisher('/clock', Clock, queue_size=1)
        self.time_factor_sub = rospy.Subscriber('/sim_time_factor', Float64, self.time_factor_callback, queue_size=1)
        self.sim_time_factor = 1.0
        self.zero_time = time.time()
        self.clock = Clock()
        rospy.loginfo("sim_time_controller initialised with realtime factor: " + str(self.sim_time_factor))

    def time_factor_callback(self, data):
        self.sim_time_factor = data.data
        rospy.loginfo("sim_time_controller realtime factor changed to: " + str(self.sim_time_factor))

    def run(self):
        rate = 100 # 100Hz
        while not rospy.is_shutdown():
            self.clock.clock = rospy.Time.from_sec(self.sim_time_factor*(time.time() - self.zero_time))
            self.clock_pub.publish(self.clock)

            time.sleep(1.0/rate)

if __name__ == '__main__':
    try:
        node = SimTimeController()
        node.run()
    except rospy.ROSInterruptException:
        pass
